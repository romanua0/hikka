# scope: hikka_only
# scop: hikka_min 1.3.0

import asyncio
import logging
import time

from telethon.errors.rpcerrorlist import YouBlockedUserError
from telethon.events import NewMessage
from telethon.tl.functions.contacts import UnblockRequest
from telethon.tl.functions.messages import ReadMentionsRequest
from telethon.tl.types import Message

from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class BFGBMod(loader.Module):
    """Tasks automation for @bfgbunker_bot"""

    strings = {"name": "BFGB"}

    strings_ru = {"_cls_doc": "–§–∞—Ä–º –≤ @bfgbunker_bot"}

    _request_timeout = 3
    _last_iter = 0
    _cache = {}

    _bot = "@bfgbunker_bot"

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "fuel",
                True,
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫—É–ø–∞—Ç—å –±–µ–Ω–∑–∏–Ω",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "room1",
                True,
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–≤–∏—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–Ω–∞—Ç—ã 1",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "room2",
                True,
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–≤–∏—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–Ω–∞—Ç—ã 2",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "room3",
                True,
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–≤–∏—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–Ω–∞—Ç—ã 3",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "room4",
                True,
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–≤–∏—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–Ω–∞—Ç—ã 4",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "room5",
                True,
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–≤–∏—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–Ω–∞—Ç—ã 5",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "room6",
                True,
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–≤–∏—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–Ω–∞—Ç—ã 6",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "room7",
                True,
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–≤–∏—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–Ω–∞—Ç—ã 7",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "room8",
                True,
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–≤–∏—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–Ω–∞—Ç—ã 8",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "room9",
                True,
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–≤–∏—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–Ω–∞—Ç—ã 9",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "room10",
                True,
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–≤–∏—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–Ω–∞—Ç—ã 10",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "room11",
                True,
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–≤–∏—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–Ω–∞—Ç—ã 11",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "room12",
                True,
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–≤–∏—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–Ω–∞—Ç—ã 12",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "room13",
                True,
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–≤–∏—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–Ω–∞—Ç—ã 13",
                validator=loader.validators.Boolean(),
            ),
        )

    async def client_ready(self):
        try:
            await self._client.send_message(
                self._bot,
                "üí´ <i>~–º–æ–¥—É–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ bfgbunker –æ—Ç romanua0 –∑–∞–ø—É—â–µ–Ω~~</i>",
            )
        except YouBlockedUserError:
            await self._client(UnblockRequest(self._bot))
            await self._client.send_message(
                self._bot,
                "üí´ <i>~–º–æ–¥—É–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ bfgbunker –æ—Ç romanua0 –∑–∞–ø—É—â–µ–Ω~~</i>",
            )

    async def _fuel(self) -> bool:
        try:
            message = await self._get_msg("–±–µ–Ω–∑–∏–Ω")
            if not message:
                return False

            await message.click(data=b"buy_fuel_409717212")
            await asyncio.sleep(1)
            return True
        except Exception:
            logger.exception("Can't process BFGB click")
            self.set("fuel", None)
            return False

    async def _room1(self) -> bool:
        try:
            message = await self._get_msg("–∫ 1")
            if not message:
                return False

            await message.click(data=b"upgrade_room_409717212_1_1")
            await asyncio.sleep(1)
            return True
        except Exception:
            logger.exception("Can't process BFGB click")
            self.set("room1", None)
            return False

    async def _room2(self) -> bool:
        try:
            message = await self._get_msg("–∫ 2")
            if not message:
                return False

            await message.click(data=b"upgrade_room_409717212_2_1")
            await asyncio.sleep(1)
            return True
        except Exception:
            logger.exception("Can't process BFGB click")
            self.set("room2", None)
            return False

    async def _room3(self) -> bool:
        try:
            message = await self._get_msg("–∫ 3")
            if not message:
                return False

            await message.click(data=b"upgrade_room_409717212_3_1")
            await asyncio.sleep(1)
            return True
        except Exception:
            logger.exception("Can't process BFGB click")
            self.set("room3", None)
            return False

    async def _room4(self) -> bool:
        try:
            message = await self._get_msg("–∫ 4")
            if not message:
                return False

            await message.click(data=b"upgrade_room_409717212_4_1")
            await asyncio.sleep(1)
            return True
        except Exception:
            logger.exception("Can't process BFGB click")
            self.set("room4", None)
            return False

    async def _room5(self) -> bool:
        try:
            message = await self._get_msg("–∫ 5")
            if not message:
                return False

            await message.click(data=b"upgrade_room_409717212_5_1")
            await asyncio.sleep(1)
            return True
        except Exception:
            logger.exception("Can't process BFGB click")
            self.set("room5", None)
            return False

    async def _room6(self) -> bool:
        try:
            message = await self._get_msg("–∫ 6")
            if not message:
                return False

            await message.click(data=b"upgrade_room_409717212_6_1")
            await asyncio.sleep(1)
            return True
        except Exception:
            logger.exception("Can't process BFGB click")
            self.set("room6", None)
            return False

    async def _room7(self) -> bool:
        try:
            message = await self._get_msg("–∫ 7")
            if not message:
                return False

            await message.click(data=b"upgrade_room_409717212_7_1")
            await asyncio.sleep(1)
            return True
        except Exception:
            logger.exception("Can't process BFGB click")
            self.set("room7", None)
            return False

    async def _room8(self) -> bool:
        try:
            message = await self._get_msg("–∫ 8")
            if not message:
                return False

            await message.click(data=b"upgrade_room_409717212_8_1")
            await asyncio.sleep(1)
            return True
        except Exception:
            logger.exception("Can't process BFGB click")
            self.set("room8", None)
            return False

    async def _room9(self) -> bool:
        try:
            message = await self._get_msg("–∫ 9")
            if not message:
                return False

            await message.click(data=b"upgrade_room_409717212_9_1")
            await asyncio.sleep(1)
            return True
        except Exception:
            logger.exception("Can't process BFGB click")
            self.set("room9", None)
            return False

    async def _room10(self) -> bool:
        try:
            message = await self._get_msg("–∫ 10")
            if not message:
                return False

            await message.click(data=b"upgrade_room_409717212_10_1")
            await asyncio.sleep(1)
            return True
        except Exception:
            logger.exception("Can't process BFGB click")
            self.set("room10", None)
            return False

    async def _room11(self) -> bool:
        try:
            message = await self._get_msg("–∫ 11")
            if not message:
                return False

            await message.click(data=b"upgrade_room_409717212_11_1")
            await asyncio.sleep(1)
            return True
        except Exception:
            logger.exception("Can't process BFGB click")
            self.set("room11", None)
            return False

    async def _room12(self) -> bool:
        try:
            message = await self._get_msg("–∫ 12")
            if not message:
                return False

            await message.click(data=b"upgrade_room_409717212_12_1")
            await asyncio.sleep(1)
            return True
        except Exception:
            logger.exception("Can't process BFGB click")
            self.set("room12", None)
            return False

    async def _room13(self) -> bool:
        try:
            message = await self._get_msg("–∫ 13")
            if not message:
                return False

            await message.click(data=b"upgrade_room_409717212_13_1")
            await asyncio.sleep(1)
            return True
        except Exception:
            logger.exception("Can't process BFGB click")
            self.set("room13", None)
            return False

    async def _get_msg(self, key: str) -> Message:
        async with self._client.conversation(self._bot) as conv:
            await conv.send_message(key)
            r = await conv.get_response()
            if "—á—Ç–æ–±—ã –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É" in r.raw_text:
                key = {
                    "–±–µ–Ω–∑–∏–Ω–∞": "fuel",
                    "–¢–µ–ø–ª–∏—Ü–∞": "room1",
                    "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä–Ω–∞—è": "room2",
                    "–°—Ç–æ–ª–æ–≤–∞—è": "room3",
                    "–°—Ç–∞–Ω—Ü–∏—è": "room4",
                    "–°–µ–π—Ñ": "room5",
                    "–ò–≥—Ä–æ–≤–∞—è": "room6",
                    "–ú–µ–¥–ø—É–Ω–∫—Ç": "room7",
                    "–†–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—è": "room8",
                    "–û—Ä—É–∂–µ–π–Ω–∞—è": "room9",
                    "–°–ø–æ—Ä—Ç–∑–∞–ª": "room10",
                    "–ì–æ—Å—Ç–∏–Ω–∞—è": "room11",
                    "–®–∞—Ö—Ç–∞": "room12",
                    "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è": "room13",
                }[key]
                self.config[f"auto{key}"] = False
                return False

            return r

    @loader.loop(interval=15, autostart=True)
    async def loop(self):
        any_ = False
        if not self.get("fee_time") or self.get("fee_time") < time.time():
            if self.config["fuel"]:
                await self._fuel()
                any_ = True
                await asyncio.sleep(5)
                
            if self.config["room1"]:
                await self._room1()
                any_ = True
                await asyncio.sleep(5)

            if self.config["room2"]:
                await self._room2()
                any_ = True
                await asyncio.sleep(5)

            if self.config["room3"]:
                await self._room3()
                any_ = True
                await asyncio.sleep(5)

            if self.config["room4"]:
                await self._room4()
                any_ = True
                await asyncio.sleep(5)

            if self.config["room5"]:
                await self._room5()
                any_ = True
                await asyncio.sleep(5)

            if self.config["room6"]:
                await self._room6()
                any_ = True
                await asyncio.sleep(5)

            if self.config["room7"]:
                await self._room7()
                any_ = True
                await asyncio.sleep(5)

            if self.config["room8"]:
                await self._room8()
                any_ = True
                await asyncio.sleep(5)

            if self.config["room9"]:
                await self._room9()
                any_ = True
                await asyncio.sleep(5)

            if self.config["room10"]:
                await self._room10()
                any_ = True
                await asyncio.sleep(5)

            if self.config["room11"]:
                await self._room11()
                any_ = True
                await asyncio.sleep(5)

            if self.config["room12"]:
                await self._room12()
                any_ = True
                await asyncio.sleep(5)

            if self.config["room13"]:
                await self._room13()
                any_ = True
                await asyncio.sleep(5)

            if any_:
                self.set("fee_time", int(time.time() + 60 * 60))
                
        if any_:
            await self._client(ReadMentionsRequest(self._bot))
